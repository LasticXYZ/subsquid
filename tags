!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!JavaScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!JavaScript	G,getter	/getters/
!_TAG_KIND_DESCRIPTION!JavaScript	M,field	/fields/
!_TAG_KIND_DESCRIPTION!JavaScript	S,setter	/setters/
!_TAG_KIND_DESCRIPTION!JavaScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!JavaScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!JavaScript	g,generator	/generators/
!_TAG_KIND_DESCRIPTION!JavaScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!JavaScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!JavaScript	v,variable	/global variables/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_KIND_DESCRIPTION!TypeScript	C,constant	/constants/
!_TAG_KIND_DESCRIPTION!TypeScript	G,generator	/generators/
!_TAG_KIND_DESCRIPTION!TypeScript	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!TypeScript	c,class	/classes/
!_TAG_KIND_DESCRIPTION!TypeScript	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!TypeScript	f,function	/functions/
!_TAG_KIND_DESCRIPTION!TypeScript	g,enum	/enums/
!_TAG_KIND_DESCRIPTION!TypeScript	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!TypeScript	m,method	/methods/
!_TAG_KIND_DESCRIPTION!TypeScript	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!TypeScript	p,property	/properties/
!_TAG_KIND_DESCRIPTION!TypeScript	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!JavaScript	1.1	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PARSER_VERSION!TypeScript	0.0	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/aurora/Desktop/Aurora/Lastic/subsquid/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!JavaScript!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
$schema	commands.json	/^  "$schema": "https:\/\/cdn.subsquid.io\/schemas\/commands.json",$/;"	s
0	commands.json	/^      "cmd": ["docker", "compose", "down"]$/;"	s	array:commands.down.cmd
0	commands.json	/^      "cmd": ["docker", "compose", "up", "-d"]$/;"	s	array:commands.up.cmd
0	commands.json	/^      "cmd": ["node", "--require=dotenv\/config", "lib\/main.js"]$/;"	s	array:commands.process.cmd
0	commands.json	/^      "cmd": ["node", "lib\/main.js"],$/;"	s	array:commands.process:prod.cmd
0	commands.json	/^      "cmd": ["npm", "i", "-f"]$/;"	s	array:commands.bump.cmd
0	commands.json	/^      "cmd": ["npx", "--yes", "npm-check-updates", "--filter=\/subsquid\/", "--upgrade"],$/;"	s	array:commands.check-updates.cmd
0	commands.json	/^      "cmd": ["npx", "--yes", "opener"]$/;"	s	array:commands.open.cmd
0	commands.json	/^      "cmd": ["npx", "--yes", "rimraf", ".\/db\/migrations"]$/;"	s	array:commands.migration:clean.cmd
0	commands.json	/^      "cmd": ["npx", "--yes", "rimraf", "lib"]$/;"	s	array:commands.clean.cmd
0	commands.json	/^      "cmd": ["squid-graphql-server",$/;"	s	array:commands.serve:prod.cmd
0	commands.json	/^      "cmd": ["squid-graphql-server"]$/;"	s	array:commands.serve.cmd
0	commands.json	/^      "cmd": ["squid-substrate-typegen", ".\/typegen.json"]$/;"	s	array:commands.typegen.cmd
0	commands.json	/^      "cmd": ["squid-typeorm-codegen"]$/;"	s	array:commands.codegen.cmd
0	commands.json	/^      "cmd": ["squid-typeorm-migration", "apply"]$/;"	s	array:commands.migration:apply.cmd
0	commands.json	/^      "cmd": ["squid-typeorm-migration", "generate"]$/;"	s	array:commands.migration:generate.cmd
0	commands.json	/^      "cmd": ["squid-typeorm-migration", "generate"],$/;"	s	array:commands.migration.cmd
0	commands.json	/^      "cmd": ["tsc"]$/;"	s	array:commands.build.cmd
0	commands.json	/^      "deps": ["build", "migration:apply"],$/;"	s	array:commands.process.deps
0	commands.json	/^      "deps": ["build", "migration:clean"],$/;"	s	array:commands.migration:generate.deps
0	commands.json	/^      "deps": ["build"],$/;"	s	array:commands.migration.deps
0	commands.json	/^      "deps": ["check-updates"],$/;"	s	array:commands.bump.deps
0	commands.json	/^      "deps": ["clean"],$/;"	s	array:commands.build.deps
0	commands.json	/^      "deps": ["migration:apply"],$/;"	s	array:commands.process:prod.deps
0	tsconfig.json	/^    "node_modules"$/;"	s	array:exclude
0	tsconfig.json	/^  "include": ["src"],$/;"	s	array:include
0	typegen.json	/^        "ExtrinsicSuccess",$/;"	s	array:pallets.System.events
0	typegen.json	/^        "Transfer"$/;"	s	array:pallets.Balances.events
1	commands.json	/^        "--dumb-cache", "in-memory",$/;"	s	array:commands.serve:prod.cmd
1	commands.json	/^      "cmd": ["docker", "compose", "down"]$/;"	s	array:commands.down.cmd
1	commands.json	/^      "cmd": ["docker", "compose", "up", "-d"]$/;"	s	array:commands.up.cmd
1	commands.json	/^      "cmd": ["node", "--require=dotenv\/config", "lib\/main.js"]$/;"	s	array:commands.process.cmd
1	commands.json	/^      "cmd": ["node", "lib\/main.js"],$/;"	s	array:commands.process:prod.cmd
1	commands.json	/^      "cmd": ["npm", "i", "-f"]$/;"	s	array:commands.bump.cmd
1	commands.json	/^      "cmd": ["npx", "--yes", "npm-check-updates", "--filter=\/subsquid\/", "--upgrade"],$/;"	s	array:commands.check-updates.cmd
1	commands.json	/^      "cmd": ["npx", "--yes", "opener"]$/;"	s	array:commands.open.cmd
1	commands.json	/^      "cmd": ["npx", "--yes", "rimraf", ".\/db\/migrations"]$/;"	s	array:commands.migration:clean.cmd
1	commands.json	/^      "cmd": ["npx", "--yes", "rimraf", "lib"]$/;"	s	array:commands.clean.cmd
1	commands.json	/^      "cmd": ["squid-substrate-typegen", ".\/typegen.json"]$/;"	s	array:commands.typegen.cmd
1	commands.json	/^      "cmd": ["squid-typeorm-migration", "apply"]$/;"	s	array:commands.migration:apply.cmd
1	commands.json	/^      "cmd": ["squid-typeorm-migration", "generate"]$/;"	s	array:commands.migration:generate.cmd
1	commands.json	/^      "cmd": ["squid-typeorm-migration", "generate"],$/;"	s	array:commands.migration.cmd
1	commands.json	/^      "deps": ["build", "migration:apply"],$/;"	s	array:commands.process.deps
1	commands.json	/^      "deps": ["build", "migration:clean"],$/;"	s	array:commands.migration:generate.deps
1	typegen.json	/^        "ExtrinsicFailed"$/;"	s	array:pallets.System.events
1. Define database schema	README.md	/^### 1. Define database schema$/;"	S	section:Squid template project""Dev flow
2	commands.json	/^        "--dumb-cache", "in-memory",$/;"	s	array:commands.serve:prod.cmd
2	commands.json	/^      "cmd": ["docker", "compose", "down"]$/;"	s	array:commands.down.cmd
2	commands.json	/^      "cmd": ["docker", "compose", "up", "-d"]$/;"	s	array:commands.up.cmd
2	commands.json	/^      "cmd": ["node", "--require=dotenv\/config", "lib\/main.js"]$/;"	s	array:commands.process.cmd
2	commands.json	/^      "cmd": ["npm", "i", "-f"]$/;"	s	array:commands.bump.cmd
2	commands.json	/^      "cmd": ["npx", "--yes", "npm-check-updates", "--filter=\/subsquid\/", "--upgrade"],$/;"	s	array:commands.check-updates.cmd
2	commands.json	/^      "cmd": ["npx", "--yes", "opener"]$/;"	s	array:commands.open.cmd
2	commands.json	/^      "cmd": ["npx", "--yes", "rimraf", ".\/db\/migrations"]$/;"	s	array:commands.migration:clean.cmd
2	commands.json	/^      "cmd": ["npx", "--yes", "rimraf", "lib"]$/;"	s	array:commands.clean.cmd
2. Generate TypeORM classes	README.md	/^### 2. Generate TypeORM classes$/;"	S	section:Squid template project""Dev flow
3	commands.json	/^        "--dumb-cache-ttl", "1000",$/;"	s	array:commands.serve:prod.cmd
3	commands.json	/^      "cmd": ["docker", "compose", "up", "-d"]$/;"	s	array:commands.up.cmd
3	commands.json	/^      "cmd": ["npx", "--yes", "npm-check-updates", "--filter=\/subsquid\/", "--upgrade"],$/;"	s	array:commands.check-updates.cmd
3	commands.json	/^      "cmd": ["npx", "--yes", "rimraf", ".\/db\/migrations"]$/;"	s	array:commands.migration:clean.cmd
3	commands.json	/^      "cmd": ["npx", "--yes", "rimraf", "lib"]$/;"	s	array:commands.clean.cmd
3. Generate database migration	README.md	/^### 3. Generate database migration$/;"	S	section:Squid template project""Dev flow
4	commands.json	/^        "--dumb-cache-ttl", "1000",$/;"	s	array:commands.serve:prod.cmd
4	commands.json	/^      "cmd": ["npx", "--yes", "npm-check-updates", "--filter=\/subsquid\/", "--upgrade"],$/;"	s	array:commands.check-updates.cmd
4. Generate TypeScript definitions for substrate events, calls and storage	README.md	/^### 4. Generate TypeScript definitions for substrate events, calls and storage $/;"	S	section:Squid template project""Dev flow
5	commands.json	/^        "--dumb-cache-size", "100",$/;"	s	array:commands.serve:prod.cmd
6	commands.json	/^        "--dumb-cache-size", "100",$/;"	s	array:commands.serve:prod.cmd
7	commands.json	/^        "--dumb-cache-max-age", "1000" ]$/;"	s	array:commands.serve:prod.cmd
8	commands.json	/^        "--dumb-cache-max-age", "1000" ]$/;"	s	array:commands.serve:prod.cmd
@subsquid/archive-registry	package.json	/^    "@subsquid\/archive-registry": "^3.3.0",$/;"	s	object:dependencies
@subsquid/graphql-server	package.json	/^    "@subsquid\/graphql-server": "^4.3.1",$/;"	s	object:dependencies
@subsquid/ss58	package.json	/^    "@subsquid\/ss58": "^2.0.1",$/;"	s	object:dependencies
@subsquid/substrate-metadata-explorer	package.json	/^    "@subsquid\/substrate-metadata-explorer": "^3.1.1",$/;"	s	object:devDependencies
@subsquid/substrate-processor	package.json	/^    "@subsquid\/substrate-processor": "^7.2.1",$/;"	s	object:dependencies
@subsquid/substrate-typegen	package.json	/^    "@subsquid\/substrate-typegen": "^8.0.1",$/;"	s	object:devDependencies
@subsquid/typeorm-codegen	package.json	/^    "@subsquid\/typeorm-codegen": "^1.3.2",$/;"	s	object:devDependencies
@subsquid/typeorm-migration	package.json	/^    "@subsquid\/typeorm-migration": "^1.2.2",$/;"	s	object:dependencies
@subsquid/typeorm-store	package.json	/^    "@subsquid\/typeorm-store": "^1.2.4",$/;"	s	object:dependencies
@types/node	package.json	/^    "@types\/node": "^20.8.4",$/;"	s	object:devDependencies
Balances	typegen.json	/^    "Balances": {$/;"	o	object:pallets
Block	src/processor.ts	/^export type Block = BlockHeader<Fields>$/;"	a
Broker	typegen.json	/^    "Broker": {$/;"	o	object:pallets
Call	src/processor.ts	/^export type Call = _Call<Fields>$/;"	a
Deploy the Squid	README.md	/^## Deploy the Squid$/;"	s	chapter:Squid template project
Dev flow	README.md	/^## Dev flow$/;"	s	chapter:Squid template project
Differences from polkadot.js	README.md	/^## Differences from polkadot.js$/;"	s	chapter:Squid template project
Event	src/processor.ts	/^export type Event = _Event<Fields>$/;"	a
Extrinsic	src/processor.ts	/^export type Extrinsic = _Extrinsic<Fields>$/;"	a
Fields	src/processor.ts	/^export type Fields = SubstrateBatchProcessorFields<typeof processor>$/;"	a
Graphql server extensions	README.md	/^## Graphql server extensions$/;"	s	chapter:Squid template project
Prerequisites	README.md	/^## Prerequisites$/;"	s	chapter:Squid template project
ProcessorContext	src/processor.ts	/^export type ProcessorContext<Store> = DataHandlerContext<Store, Fields>$/;"	a
Project conventions	README.md	/^## Project conventions$/;"	s	chapter:Squid template project
Public archives for Parachains	README.md	/^## Public archives for Parachains$/;"	s	chapter:Squid template project
Quickly running the sample	README.md	/^## Quickly running the sample$/;"	s	chapter:Squid template project
Self-hosted archive	README.md	/^## Self-hosted archive$/;"	s	chapter:Squid template project
Squid template project	README.md	/^# Squid template project$/;"	c
Summary	README.md	/^## Summary$/;"	s	chapter:Squid template project
System	typegen.json	/^    "System": {$/;"	o	object:pallets
Types bundle	README.md	/^## Types bundle$/;"	s	chapter:Squid template project
WebSocket	scripts/sub-client.js	/^const WebSocket = require('ws')$/;"	C
allowedRenewalDroppedEntities	src/main.ts	/^    let allowedRenewalDroppedEntities: AllowedRenewalDropped[] = createAllowedRenewalDroppedEnti/;"	v
allowedRenewalDroppedEvents	src/main.ts	/^    let allowedRenewalDroppedEvents: AllowedRenewalDroppedEvent[] = getAllowedRenewalDroppedEven/;"	v
anonymousObject2d82d8dd0105	scripts/sub-client.js	/^const client = createClient({$/;"	v
anonymousObject2d82d8dd0205	scripts/sub-client.js	/^  {$/;"	v
anonymousObject2d82d8dd0305	scripts/sub-client.js	/^  {$/;"	v
assignCallEntities	src/main.ts	/^    let assignCallEntities: AssignExt[] = createAssignCallEntities(assignCalls)$/;"	v
assignCalls	src/main.ts	/^    let assignCalls: AssignCall[] = getAssignCalls(ctx)$/;"	v
assignedEntities	src/main.ts	/^    let assignedEntities: Assigned[] = createAssignedEntities(assignedEvents)$/;"	v
assignedEvents	src/main.ts	/^    let assignedEvents: AssignedEvent[] = getAssignedEvents(ctx)$/;"	v
build	commands.json	/^    "build": {$/;"	o	object:commands
build	package.json	/^    "build": "rm -rf lib && tsc"$/;"	s	object:scripts
bump	commands.json	/^    "bump": {$/;"	o	object:commands
calls	typegen.json	/^      "calls": [],$/;"	a	object:pallets.Balances
calls	typegen.json	/^      "calls": [],$/;"	a	object:pallets.System
calls	typegen.json	/^      "calls": true,$/;"	b	object:pallets.Broker
check-updates	commands.json	/^    "check-updates": {$/;"	o	object:commands
claimRevenueCallEntities	src/main.ts	/^    let claimRevenueCallEntities: ClaimRevenueExt[] = createClaimRevenueCallEntities(claimRevenu/;"	v
claimRevenueCalls	src/main.ts	/^    let claimRevenueCalls: ClaimRevenueCall[] = getClaimRevenueCalls(ctx)$/;"	v
claimsReadyEntities	src/main.ts	/^    let claimsReadyEntities: ClaimsReady[] = createClaimsReadyEntities(claimsReadyEvents)$/;"	v
claimsReadyEvents	src/main.ts	/^    let claimsReadyEvents: ClaimsReadyEvent[] = getClaimsReadyEvents(ctx)$/;"	v
clean	commands.json	/^    "clean": {$/;"	o	object:commands
client	scripts/sub-client.js	/^const client = createClient({$/;"	C
cmd	commands.json	/^      "cmd": ["docker", "compose", "down"]$/;"	a	object:commands.down
cmd	commands.json	/^      "cmd": ["docker", "compose", "up", "-d"]$/;"	a	object:commands.up
cmd	commands.json	/^      "cmd": ["node", "--require=dotenv\/config", "lib\/main.js"]$/;"	a	object:commands.process
cmd	commands.json	/^      "cmd": ["node", "lib\/main.js"],$/;"	a	object:commands.process:prod
cmd	commands.json	/^      "cmd": ["npm", "i", "-f"]$/;"	a	object:commands.bump
cmd	commands.json	/^      "cmd": ["npx", "--yes", "npm-check-updates", "--filter=\/subsquid\/", "--upgrade"],$/;"	a	object:commands.check-updates
cmd	commands.json	/^      "cmd": ["npx", "--yes", "opener"]$/;"	a	object:commands.open
cmd	commands.json	/^      "cmd": ["npx", "--yes", "rimraf", ".\/db\/migrations"]$/;"	a	object:commands.migration:clean
cmd	commands.json	/^      "cmd": ["npx", "--yes", "rimraf", "lib"]$/;"	a	object:commands.clean
cmd	commands.json	/^      "cmd": ["squid-graphql-server",$/;"	a	object:commands.serve:prod
cmd	commands.json	/^      "cmd": ["squid-graphql-server"]$/;"	a	object:commands.serve
cmd	commands.json	/^      "cmd": ["squid-substrate-typegen", ".\/typegen.json"]$/;"	a	object:commands.typegen
cmd	commands.json	/^      "cmd": ["squid-typeorm-codegen"]$/;"	a	object:commands.codegen
cmd	commands.json	/^      "cmd": ["squid-typeorm-migration", "apply"]$/;"	a	object:commands.migration:apply
cmd	commands.json	/^      "cmd": ["squid-typeorm-migration", "generate"]$/;"	a	object:commands.migration:generate
cmd	commands.json	/^      "cmd": ["squid-typeorm-migration", "generate"],$/;"	a	object:commands.migration
cmd	commands.json	/^      "cmd": ["tsc"]$/;"	a	object:commands.build
codegen	commands.json	/^    "codegen": {$/;"	o	object:commands
commands	commands.json	/^  "commands": {$/;"	o
compilerOptions	tsconfig.json	/^  "compilerOptions": {$/;"	o
complete	scripts/sub-client.js	/^    complete: () => {$/;"	m	variable:anonymousObject2d82d8dd0305
configureCallEntities	src/main.ts	/^    let configureCallEntities: ConfigureExt[] = createConfigureCallEntities(configureCalls)$/;"	v
configureCalls	src/main.ts	/^    let configureCalls: ConfigureCall[] = getConfigureCalls(ctx)$/;"	v
constants	typegen.json	/^      "constants": []$/;"	a	object:pallets.Balances
constants	typegen.json	/^      "constants": []$/;"	a	object:pallets.System
constants	typegen.json	/^      "constants": true$/;"	b	object:pallets.Broker
contributionDroppedEntities	src/main.ts	/^    let contributionDroppedEntities: ContributionDropped[] = createContributionDroppedEntities(c/;"	v
contributionDroppedEvents	src/main.ts	/^    let contributionDroppedEvents: ContributionDroppedEvent[] = getContributionDroppedEvents(ctx/;"	v
coreAssignedEntities	src/main.ts	/^    let coreAssignedEntities: CoreAssigned[] = createCoreAssignedEntities(coreAssignedEvents)$/;"	v
coreAssignedEvents	src/main.ts	/^    let coreAssignedEvents: CoreAssignedEvent[] = getCoreAssignedEvents(ctx)$/;"	v
coreCountChangedEntities	src/main.ts	/^    let coreCountChangedEntities: CoreCountChanged[] = createCoreCountChangedEntities(coreCountC/;"	v
coreCountChangedEvents	src/main.ts	/^    let coreCountChangedEvents: CoreCountChangedEvent[] = getCoreCountChangedEvents(ctx)$/;"	v
coreCountRequestedEntities	src/main.ts	/^    let coreCountRequestedEntities: CoreCountRequested[] = createCoreCountRequestedEntities(core/;"	v
coreCountRequestedEvents	src/main.ts	/^    let coreCountRequestedEvents: CoreCountRequestedEvent[] = getCoreCountRequestedEvents(ctx)$/;"	v
creditPurchasedEntities	src/main.ts	/^    let creditPurchasedEntities: CreditPurchased[] = createCreditPurchasedEntities(creditPurchas/;"	v
creditPurchasedEvents	src/main.ts	/^    let creditPurchasedEvents: CreditPurchasedEvent[] = getCreditPurchasedEvents(ctx)$/;"	v
declaration	tsconfig.json	/^    "declaration": false,$/;"	b	object:compilerOptions
dependencies	package.json	/^  "dependencies": {$/;"	o
deps	commands.json	/^      "deps": ["build", "migration:apply"],$/;"	a	object:commands.process
deps	commands.json	/^      "deps": ["build", "migration:clean"],$/;"	a	object:commands.migration:generate
deps	commands.json	/^      "deps": ["build"],$/;"	a	object:commands.migration
deps	commands.json	/^      "deps": ["check-updates"],$/;"	a	object:commands.bump
deps	commands.json	/^      "deps": ["clean"],$/;"	a	object:commands.build
deps	commands.json	/^      "deps": ["migration:apply"],$/;"	a	object:commands.process:prod
description	commands.json	/^      "description": "Apply the DB migrations",$/;"	s	object:commands.migration:apply
description	commands.json	/^      "description": "Build the squid project",$/;"	s	object:commands.build
description	commands.json	/^      "description": "Bump @subsquid packages to the latest versions",$/;"	s	object:commands.bump
description	commands.json	/^      "description": "Clean the migrations folder",$/;"	s	object:commands.migration:clean
description	commands.json	/^      "description": "Drop a PG database",$/;"	s	object:commands.down
description	commands.json	/^      "description": "Generate TypeORM entities from the schema file",$/;"	s	object:commands.codegen
description	commands.json	/^      "description": "Generate a DB migration matching the TypeORM entities",$/;"	s	object:commands.migration:generate
description	commands.json	/^      "description": "Generate data access classes for an substrate metadata",$/;"	s	object:commands.typegen
description	commands.json	/^      "description": "Load .env and start the squid processor",$/;"	s	object:commands.process
description	commands.json	/^      "description": "Open a local browser window",$/;"	s	object:commands.open
description	commands.json	/^      "description": "Start a PG database",$/;"	s	object:commands.up
description	commands.json	/^      "description": "Start the GraphQL API server with caching and limits",$/;"	s	object:commands.serve:prod
description	commands.json	/^      "description": "Start the GraphQL API server",$/;"	s	object:commands.serve
description	commands.json	/^      "description": "Start the squid processor",$/;"	s	object:commands.process:prod
description	commands.json	/^      "description": "delete all build artifacts",$/;"	s	object:commands.clean
devDependencies	package.json	/^  "devDependencies": {$/;"	o
dotenv	package.json	/^    "dotenv": "^16.3.1",$/;"	s	object:dependencies
down	commands.json	/^    "down": {$/;"	o	object:commands
dropContributionCallEntities	src/main.ts	/^    let dropContributionCallEntities: DropContributionExt[] = createDropContributionCallEntities/;"	v
dropContributionCalls	src/main.ts	/^    let dropContributionCalls: DropContributionCall[] = getDropContributionCalls(ctx)$/;"	v
dropHistoryCallEntities	src/main.ts	/^    let dropHistoryCallEntities: DropHistoryExt[] = createDropHistoryCallEntities(dropHistoryCal/;"	v
dropHistoryCalls	src/main.ts	/^    let dropHistoryCalls: DropHistoryCall[] = getDropHistoryCalls(ctx)$/;"	v
dropRegionCallEntities	src/main.ts	/^    let dropRegionCallEntities: DropRegionExt[] = createDropRegionCallEntities(dropRegionCalls)$/;"	v
dropRegionCalls	src/main.ts	/^    let dropRegionCalls: DropRegionCall[] = getDropRegionCalls(ctx)$/;"	v
dropRenewalCallEntities	src/main.ts	/^    let dropRenewalCallEntities: DropRenewalExt[] = createDropRenewalCallEntities(dropRenewalCal/;"	v
dropRenewalCalls	src/main.ts	/^    let dropRenewalCalls: DropRenewalCall[] = getDropRenewalCalls(ctx)$/;"	v
emitDecoratorMetadata	tsconfig.json	/^    "emitDecoratorMetadata": true,$/;"	b	object:compilerOptions
engines	package.json	/^  "engines": {$/;"	o
error	scripts/sub-client.js	/^    error: (error) => {$/;"	m	variable:anonymousObject2d82d8dd0305
esModuleInterop	tsconfig.json	/^    "esModuleInterop": true,$/;"	b	object:compilerOptions
events	typegen.json	/^      "events": [$/;"	a	object:pallets.Balances
events	typegen.json	/^      "events": [$/;"	a	object:pallets.System
events	typegen.json	/^      "events": true,$/;"	b	object:pallets.Broker
exclude	tsconfig.json	/^  "exclude": [$/;"	a
experimentalDecorators	tsconfig.json	/^    "experimentalDecorators": true,$/;"	b	object:compilerOptions
hidden	commands.json	/^      "hidden": true$/;"	b	object:commands.check-updates
hidden	commands.json	/^      "hidden": true$/;"	b	object:commands.migration
hidden	commands.json	/^      "hidden": true$/;"	b	object:commands.process:prod
historyDroppedEntities	src/main.ts	/^    let historyDroppedEntities: HistoryDropped[] = createHistoryDroppedEntities(historyDroppedEv/;"	v
historyDroppedEvents	src/main.ts	/^    let historyDroppedEvents: HistoryDroppedEvent[] = getHistoryDroppedEvents(ctx)$/;"	v
historyIgnoredEntities	src/main.ts	/^    let historyIgnoredEntities: HistoryIgnored[] = createHistoryIgnoredEntities(historyIgnoredEv/;"	v
historyIgnoredEvents	src/main.ts	/^    let historyIgnoredEvents: HistoryIgnoredEvent[] = getHistoryIgnoredEvents(ctx)$/;"	v
historyInitializedEntities	src/main.ts	/^    let historyInitializedEntities: HistoryInitialized[] = createHistoryInitializedEntities(hist/;"	v
historyInitializedEvents	src/main.ts	/^    let historyInitializedEvents: HistoryInitializedEvent[] = getHistoryInitializedEvents(ctx)$/;"	v
host	scripts/sub-client.js	/^const host = process.env.GQL_HOST || 'localhost'$/;"	C
include	tsconfig.json	/^  "include": ["src"],$/;"	a
interlaceCallEntities	src/main.ts	/^    let interlaceCallEntities: InterlaceExt[] = createInterlaceCallEntities(interlaceCalls)$/;"	v
interlaceCalls	src/main.ts	/^    let interlaceCalls: InterlaceCall[] = getInterlaceCalls(ctx)$/;"	v
interlacedEntities	src/main.ts	/^    let interlacedEntities: Interlaced[] = createInterlacedEntities(interlacedEvents)$/;"	v
interlacedEvents	src/main.ts	/^    let interlacedEvents: InterlacedEvent[] = getInterlacedEvents(ctx)$/;"	v
leaseEndingEntities	src/main.ts	/^    let leaseEndingEntities: LeaseEnding[] = createLeaseEndingEntities(leaseEndingEvents)$/;"	v
leaseEndingEvents	src/main.ts	/^    let leaseEndingEvents: LeaseEndingEvent[] = getLeaseEndingEvents(ctx)$/;"	v
leasedEntities	src/main.ts	/^    let leasedEntities: Leased[] = createLeasedEntities(leasedEvents)$/;"	v
leasedEvents	src/main.ts	/^    let leasedEvents: LeasedEvent[] = getLeasedEvents(ctx)$/;"	v
migration	commands.json	/^    "migration": {$/;"	o	object:commands
migration:apply	commands.json	/^    "migration:apply": {$/;"	o	object:commands
migration:clean	commands.json	/^    "migration:clean": {$/;"	o	object:commands
migration:generate	commands.json	/^    "migration:generate": {$/;"	o	object:commands
module	tsconfig.json	/^    "module": "commonjs",$/;"	s	object:compilerOptions
name	package.json	/^  "name": "squid",$/;"	s
next	scripts/sub-client.js	/^    next: (data) => {$/;"	m	variable:anonymousObject2d82d8dd0305
node	package.json	/^    "node": ">=16"$/;"	s	object:engines
open	commands.json	/^    "open": {$/;"	o	object:commands
outDir	tsconfig.json	/^    "outDir": "lib",$/;"	s	object:compilerOptions
outDir	typegen.json	/^  "outDir": "src\/types",$/;"	s
pallets	typegen.json	/^  "pallets": {$/;"	o
partitionCallEntities	src/main.ts	/^    let partitionCallEntities: PartitionExt[] = createPartitionCallEntities(partitionCalls)$/;"	v
partitionCalls	src/main.ts	/^    let partitionCalls: PartitionCall[] = getPartitionCalls(ctx)$/;"	v
partitionedEntities	src/main.ts	/^    let partitionedEntities: Partitioned[] = createPartitionedEntities(partitionedEvents)$/;"	v
partitionedEvents	src/main.ts	/^    let partitionedEvents: PartitionedEvent[] = getPartitionedEvents(ctx)$/;"	v
pg	package.json	/^    "pg": "8.11.3",$/;"	s	object:dependencies
poolCallEntities	src/main.ts	/^    let poolCallEntities: PoolExt[] = createPoolCallEntities(poolCalls)$/;"	v
poolCalls	src/main.ts	/^    let poolCalls: PoolCall[] = getPoolCalls(ctx)$/;"	v
pooledEntities	src/main.ts	/^    let pooledEntities: Pooled[] = createPooledEntities(pooledEvents)$/;"	v
pooledEvents	src/main.ts	/^    let pooledEvents: PooledEvent[] = getPooledEvents(ctx)$/;"	v
port	scripts/sub-client.js	/^const port = process.env.GQL_PORT || 4350$/;"	C
private	package.json	/^  "private": true,$/;"	b
process	commands.json	/^    "process": {$/;"	o	object:commands
process:prod	commands.json	/^    "process:prod": {$/;"	o	object:commands
processor	src/processor.ts	/^export const processor = new SubstrateBatchProcessor()$/;"	C
proto	scripts/sub-client.js	/^const proto = process.env.GQL_PROTO || 'ws'$/;"	C
purchaseCallEntities	src/main.ts	/^    let purchaseCallEntities: PurchaseExt[] = createPurchaseCallEntities(purchaseCalls)$/;"	v
purchaseCalls	src/main.ts	/^    let purchaseCalls: PurchaseCall[] = getPurchaseCalls(ctx)$/;"	v
purchaseCreditCallEntities	src/main.ts	/^    let purchaseCreditCallEntities: PurchaseCreditExt[] = createPurchaseCreditCallEntities(purch/;"	v
purchaseCreditCalls	src/main.ts	/^    let purchaseCreditCalls: PurchaseCreditCall[] = getPurchaseCreditCalls(ctx)$/;"	v
purchasedEntities	src/main.ts	/^    let purchasedEntities: Purchased[] = createPurchasedEntities(purchasedEvents)$/;"	v
purchasedEvents	src/main.ts	/^    let purchasedEvents: PurchasedEvent[] = getPurchasedEvents(ctx)$/;"	v
query	scripts/sub-client.js	/^    query: `$/;"	p	variable:anonymousObject2d82d8dd0205
regionDroppedEntities	src/main.ts	/^    let regionDroppedEntities: RegionDropped[] = createRegionDroppedEntities(regionDroppedEvents/;"	v
regionDroppedEvents	src/main.ts	/^    let regionDroppedEvents: RegionDroppedEvent[] = getRegionDroppedEvents(ctx)$/;"	v
renewCallEntities	src/main.ts	/^    let renewCallEntities: RenewExt[] = createRenewCallEntities(renewCalls)$/;"	v
renewCalls	src/main.ts	/^    let renewCalls: RenewCall[] = getRenewCalls(ctx)$/;"	v
renewableEntities	src/main.ts	/^    let renewableEntities: Renewable[] = createRenewableEntities(renewableEvents)$/;"	v
renewableEvents	src/main.ts	/^    let renewableEvents: RenewableEvent[] = getRenewableEvents(ctx)$/;"	v
renewedEntities	src/main.ts	/^    let renewedEntities: Renewed[] = createRenewedEntities(renewedEvents)$/;"	v
renewedEvents	src/main.ts	/^    let renewedEvents: RenewedEvent[] = getRenewedEvents(ctx)$/;"	v
requestCoreCountCallEntities	src/main.ts	/^    let requestCoreCountCallEntities: RequestCoreCountExt[] = createRequestCoreCountCallEntities/;"	v
requestCoreCountCalls	src/main.ts	/^    let requestCoreCountCalls: RequestCoreCountCall[] = getRequestCoreCountCalls(ctx)$/;"	v
reservationCancelledEntities	src/main.ts	/^    let reservationCancelledEntities: ReservationCancelled[] = createReservationCancelledEntitie/;"	v
reservationCancelledEvents	src/main.ts	/^    let reservationCancelledEvents: ReservationCancelledEvent[] = getReservationCancelledEvents(/;"	v
reservationMadeEntities	src/main.ts	/^    let reservationMadeEntities: ReservationMade[] = createReservationMadeEntities(reservationMa/;"	v
reservationMadeEvents	src/main.ts	/^    let reservationMadeEvents: ReservationMadeEvent[] = getReservationMadeEvents(ctx)$/;"	v
reserveCallEntities	src/main.ts	/^    let reserveCallEntities: ReserveExt[] = createReserveCallEntities(reserveCalls)$/;"	v
reserveCalls	src/main.ts	/^    let reserveCalls: ReserveCall[] = getReserveCalls(ctx)$/;"	v
revenueClaimBegunEntities	src/main.ts	/^    let revenueClaimBegunEntities: RevenueClaimBegun[] = createRevenueClaimBegunEntities(revenue/;"	v
revenueClaimBegunEvents	src/main.ts	/^    let revenueClaimBegunEvents: RevenueClaimBegunEvent[] = getRevenueClaimBegunEvents(ctx)$/;"	v
revenueClaimItemEntities	src/main.ts	/^    let revenueClaimItemEntities: RevenueClaimItem[] = createRevenueClaimItemEntities(revenueCla/;"	v
revenueClaimItemEvents	src/main.ts	/^    let revenueClaimItemEvents: RevenueClaimItemEvent[] = getRevenueClaimItemEvents(ctx)$/;"	v
revenueClaimPaidEntities	src/main.ts	/^    let revenueClaimPaidEntities: RevenueClaimPaid[] = createRevenueClaimPaidEntities(revenueCla/;"	v
revenueClaimPaidEvents	src/main.ts	/^    let revenueClaimPaidEvents: RevenueClaimPaidEvent[] = getRevenueClaimPaidEvents(ctx)$/;"	v
rootDir	tsconfig.json	/^    "rootDir": "src",$/;"	s	object:compilerOptions
saleInitializedEntities	src/main.ts	/^    let saleInitializedEntities: SaleInitialized[] = createSaleInitializedEntities(saleInitializ/;"	v
saleInitializedEvents	src/main.ts	/^    let saleInitializedEvents: SaleInitializedEvent[] = getSaleInitializedEvents(ctx)$/;"	v
salesStartedEntities	src/main.ts	/^    let salesStartedEntities: SalesStarted[] = createSalesStartedEntities(salesStartedEvents)$/;"	v
salesStartedEvents	src/main.ts	/^    let salesStartedEvents: SalesStartedEvent[] = getSalesStartedEvents(ctx)$/;"	v
scripts	package.json	/^  "scripts": {$/;"	o
serve	commands.json	/^    "serve": {$/;"	o	object:commands
serve:prod	commands.json	/^    "serve:prod": {$/;"	o	object:commands
setLeaseCallEntities	src/main.ts	/^    let setLeaseCallEntities: SetLeaseExt[] = createSetLeaseCallEntities(setLeaseCalls)$/;"	v
setLeaseCalls	src/main.ts	/^    let setLeaseCalls: SetLeaseCall[] = getSetLeaseCalls(ctx)$/;"	v
skipLibCheck	tsconfig.json	/^    "skipLibCheck": true$/;"	b	object:compilerOptions
sourceMap	tsconfig.json	/^    "sourceMap": true,$/;"	b	object:compilerOptions
specVersions	typegen.json	/^  "specVersions": "myMetadata.jsonl",$/;"	s
startSalesCallEntities	src/main.ts	/^    let startSalesCallEntities: StartSalesExt[] = createStartSalesCallEntities(startSalesCalls)$/;"	v
startSalesCalls	src/main.ts	/^    let startSalesCalls: StartSalesCall[] = getStartSalesCalls(ctx)$/;"	v
storage	typegen.json	/^      "storage": [],$/;"	a	object:pallets.Balances
storage	typegen.json	/^      "storage": [],$/;"	a	object:pallets.Broker
storage	typegen.json	/^      "storage": [],$/;"	a	object:pallets.System
strict	tsconfig.json	/^    "strict": true,$/;"	b	object:compilerOptions
target	tsconfig.json	/^    "target": "es2020",$/;"	s	object:compilerOptions
transferCallEntities	src/main.ts	/^    let transferCallEntities: TransferExt[] = createTransferCallEntities(transferCalls)$/;"	v
transferCalls	src/main.ts	/^    let transferCalls: TransferCall[] = getTransferCalls(ctx)$/;"	v
transferredEntities	src/main.ts	/^    let transferredEntities: Transferred[] = createTransferredEntities(transferredEvents)$/;"	v
transferredEvents	src/main.ts	/^    let transferredEvents: TransferredEvent[] = getTransferredEvents(ctx)$/;"	v
typegen	commands.json	/^    "typegen": {$/;"	o	object:commands
typeorm	package.json	/^    "typeorm": "^0.3.17"$/;"	s	object:dependencies
typescript	package.json	/^    "typescript": "^5.2.2"$/;"	s	object:devDependencies
unreserveCallEntities	src/main.ts	/^    let unreserveCallEntities: UnreserveExt[] = createUnreserveCallEntities(unreserveCalls)$/;"	v
unreserveCalls	src/main.ts	/^    let unreserveCalls: UnreserveCall[] = getUnreserveCalls(ctx)$/;"	v
up	commands.json	/^    "up": {$/;"	o	object:commands
url	scripts/sub-client.js	/^  url: `${proto}:\/\/${host}:${port}\/graphql`,$/;"	p	variable:anonymousObject2d82d8dd0105
webSocketImpl	scripts/sub-client.js	/^  webSocketImpl: WebSocket,$/;"	p	variable:anonymousObject2d82d8dd0105
