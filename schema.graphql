type HistoryInitialized @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  when: Int!
  privatePoolSize: BigInt!
  systemPoolSize: BigInt!
}

type SaleInitialized @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  saleStart: Int!
  leadinLength: Int!
  startPrice: BigInt!
  regularPrice: BigInt!
  regionBegin: Int!
  regionEnd: Int!
  idealCoresSold: Int!
  coresOffered: Int!
}

type SalesStarted @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  price: BigInt!
  coreCount: Int
}

type Purchased @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  who: String!
  regionId: RegionId!
  price: BigInt!
  duration: Int!
}

type CoreOwner @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  owner: String!
  regionId: RegionId!
  price: BigInt
  duration: Int!
  pooled: Boolean! @index
  assigned: Boolean! @index
  task: Int
}

type Renewable @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  core: Int!
  price: BigInt!
  begin: Int!
  workload: [ScheduleItem!]!
}

type Renewed @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  who: String!
  price: BigInt!
  oldCore: Int!
  core: Int!
  begin: Int!
  duration: Int!
  workload: [ScheduleItem!]!
}

type Transferred @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  regionId: RegionId!
  duration: Int!
  oldOwner: String!
  owner: String!
}

type Partitioned @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  oldRegionId: RegionId!
  newRegionIds: RegionIdPair!
}

type Interlaced @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  oldRegionId: RegionId!
  newRegionIds: RegionIdPair!
}

type Assigned @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  regionId: RegionId!
  duration: Int!
  task: Int!
}

type Pooled @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  regionId: RegionId!
  duration: Int!
}

type CoreCountRequested @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  coreCount: Int
}

type CoreCountChanged @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  coreCount: Int
}

type ReservationMade @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  index: Int!
  workload: [ScheduleItem!]!
}

type ReservationCancelled @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  index: Int!
  workload: [ScheduleItem!]!
}

type Leased @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  task: Int!
  until: Int!
}

type LeaseEnding @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  task: Int!
  when: Int!
}

type RevenueClaimBegun @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  region: RegionId!
  maxTimeslices: Int!
}

type RevenueClaimItem @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  who: String!
  amount: BigInt!
}

type RevenueClaimPaid @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  who: String!
  amount: BigInt!
  next: Int
}

type CreditPurchased @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  who: String!
  beneficiary: String!
  amount: BigInt!
}

type RegionDropped @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  regionId: RegionId!
  duration: Int!
}

type ContributionDropped @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  regionId: RegionId!
}

type HistoryDropped @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  when: Int!
  revenue: BigInt!
}

type HistoryIgnored @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  when: Int!
  revenue: BigInt!
}

type ClaimsReady @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  when: Int!
  systemPayout: BigInt!
  privatePayout: BigInt!
}

type CoreAssigned @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  core: Int!
  when: Int!
  assignment: [CoreAssignmentTuple!]!
}

type AllowedRenewalDropped @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  when: Int!
  core: Int!
}




type ConfigureExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  config: ConfigRecord!
}

type ReserveExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  workload: [ScheduleItem!]!
}

type UnreserveExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  itemIndex: Int!
}

type SetLeaseExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  task: Int!
  until: Int!
}

type StartSalesExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  initialPrice: BigInt!
  coreCount: Int
}

type PurchaseExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  priceLimit: BigInt!
}

type RenewExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  core: Int!
}

type TransferExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  regionId: RegionId!
  newOwner: String!
}

type PartitionExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  regionId: RegionId!
  pivot: Int!
}

type InterlaceExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  regionId: RegionId!
  pivot: String!
}

type AssignExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  regionId: RegionId!
  task: Int!
  finality: String!
}

type PoolExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  regionId: RegionId!
  payee: String!
  finality: String!
}

type ClaimRevenueExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  regionId: RegionId!
  maxTimeslices: Int!
}

type PurchaseCreditExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  amount: BigInt!
  beneficiary: String!
}

type DropRegionExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  regionId: RegionId!
}

type DropContributionExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  regionId: RegionId!
}

type DropHistoryExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  when: Int!
}

type DropRenewalExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  core: Int!
  when: Int!
}

type RequestCoreCountExt @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  extrinsicHash: String @index
  coreCount: Int
}






type ScheduleItem {
  mask: String!
  assignment: CoreAssignment!
}

type CoreAssignmentTuple {
  assignment: CoreAssignment!
  value: Int!
}

type CoreAssignment {
  kind: CoreAssignmentKind!
  value: Int
}

enum CoreAssignmentKind {
  Idle
  Pool
  Task
}

type RegionId {
    begin: Int!
    core: Int!
    mask: String!
}

type RegionIdPair {
  first: RegionId!
  second: RegionId!
}

type ConfigRecord {
    advanceNotice: Int!,
    interludeLength: Int!,
    leadinLength: Int!,
    regionLength: Int!,
    idealBulkProportion: Int!,
    limitCoresOffered: Int,
    renewalBump: Int!,
    contributionTimeout: Int!,
}


type NewMultisig @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  approving: String! @index
  multisig: String! @index
  callHash: String @index
}

type Timepoint {
  height: Int!
  index: Int!
}

type MultisigApproval @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  approving: String! @index
  timepoint: Timepoint!
  callHash: String @index
}


type ResultType {
  kind: String!
}

type MultisigExecuted @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  approving: String! @index
  timepoint: Timepoint!
  multisig: String! @index
  callHash: String @index
  result: ResultType!
}


type MultisigCancelled @entity {
  id: ID!
  blockNumber: Int! @index
  timestamp: DateTime! @index
  cancelling: String! @index
  timepoint: Timepoint!
  multisig: String! @index
  callHash: String @index
}
